@inject IRepository Repository﻿
@inject NavigationManager NavigationManager
@inject SweetAlertService SweetAlertService
@page "/administrationUsers"

<h3>Usuario</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/administrationUsers/create">Nuevo Usuario</a>
</div>

<GenericList MyList="users">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Correo</th>
                    <th>IdUsuario</th>
                    <th>UserName</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var usuario in users!)
                {
                    <tr>
                        <td>
                            @usuario.Email
                        </td>
                        <td>
                            @usuario.IdUsuario
                        </td>
                        <td>
                            @usuario.UserName
                        </td>
                        <td>
                            @*  <a href="/users/edit/@usuario.Cedula" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(usuario))>Borrar</button> *@

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {

    public List<User> users { get; set; }
    @*NOTA: Se me ocurre combinar ese index con los de Usuarios, ahora miro*@

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        await base.OnInitializedAsync();
        var responseHppt = await Repository.GetAsync<List<User>>("/api/accounts");
        if (responseHppt.Error)
        {
            var message = await responseHppt.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        users = responseHppt.Response!;

    }
    private async Task DeleteAsync(Usuario usuario)
    {
        var result = await SweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar el usuario: {usuario.Nombre}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await Repository.DeleteAsync($"api/Usuario/{usuario.Cedula}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await SweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            return;
        }

        await LoadAsync();
        var toast = SweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }

}

   
