@using CurrieTechnologies.Razor.SweetAlert2;
@using Microsoft.AspNetCore.Components;
@using Pizzeria.Frontend.Repositories;
@using Pizzeria.Shared.Entities;
@inject AuthenticationStateProvider AuthenticationStateProvider
@page "/register"


<UsersForm @ref="usersForm" IsAdmin="IsAdmin.GetValueOrDefault()" userDTO="userDTO" OnValidSubmit="CreateAsync" ReturnAction="Return" />


@code {

    private UsersForm? usersForm;

    private bool? IsAdmin = false;
    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private SweetAlertService SweetAlertService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Verificamos si el usuario tiene la claim de administrador
        IsAdmin = user.Identity?.IsAuthenticated == true && user.IsInRole("Admin");
    }

    private UserDTO userDTO = new();


    private async Task CreateAsync()
    {
        userDTO.UserName = userDTO.Email;
        if (!IsAdmin.GetValueOrDefault())
        {
            userDTO.UserType = UserType.Client;
        }
        var responseHttp = await Repository.PostAsync<UserDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message);
            return;
        }
        await SweetAlertService.FireAsync("Confirmación"
        , "Su cuenta ha sido creada con éxito. Se le ha enviado un correo electrónico al administrador para activar tu usuario."
        , SweetAlertIcon.Info);
        Return();
    }

    private void Return()
    {
        usersForm!.FormPostedSuccessfully = true;
        NavigationManager.NavigateTo("/");
    }
}

