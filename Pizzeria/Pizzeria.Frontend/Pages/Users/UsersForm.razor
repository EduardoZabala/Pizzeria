@using CurrieTechnologies.Razor.SweetAlert2;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components;
@using Pizzeria.Shared.Entities;
@using Microsoft.AspNetCore.Components.Routing;

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<div class="register-form">
    <h2>Registrarse a Pizzería</h2>
    <EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Correo:</label>
            <InputText class="form-control" @bind-Value="@userDTO.Email" placeholder="Ingrese su correo" />
            <ValidationMessage For="@(() => userDTO.Email)" />
        </div>

        <div class="form-group">
            <label>Contraseña:</label>
            <InputText type="password" class="form-control" @bind-Value="@userDTO.Password" placeholder="Ingrese su contraseña" />
            <ValidationMessage For="@(() => userDTO.Password)" />
        </div>

        <div class="form-group">
            <label>Confirme su contraseña:</label>
            <InputText type="password" class="form-control" @bind-Value="@userDTO.PasswordConfirm" placeholder="Ingrese su contraseña" />
            <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
        </div>

        <div class="form-group">
            <label>Cédula:</label>
            <InputText class="form-control" @bind-Value="@userDTO.Cedula" placeholder="Ingrese su cédula" />
            <ValidationMessage For="@(() => userDTO.Cedula)" />
        </div>

        <div class="form-group">
            <label>Número telefónico:</label>
            <InputText class="form-control" @bind-Value="@userDTO.PhoneNumber" placeholder="Ingrese su número telefónico" />
            <ValidationMessage For="@(() => userDTO.PhoneNumber)" />
        </div>

        <div class="form-group">
            <label>Dirección:</label>
            <InputText class="form-control" @bind-Value="@userDTO.Direccion" placeholder="Ingrese su dirección" />
            <ValidationMessage For="@(() => userDTO.Direccion)" />
        </div>

        @if (IsAdmin.GetValueOrDefault())
        {
            <div class="form-group">
                <label>Tipo de Usuario:</label>
                <InputSelect class="form-control" @bind-Value="@userDTO.UserType">
                    <option value="" disabled>Seleccione el tipo de usuario</option>
                    <option value="@UserType.Client">Cliente</option>
                    <option value="@UserType.Admin">Administrador</option>
                    <option value="@UserType.User">Empleado</option>
                </InputSelect>
                <ValidationMessage For="@(() => userDTO.UserType)" />
            </div>
        }

        <button class="btn-submit" type="submit">Registrarse</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public bool? IsAdmin { get; set; }
    private EditContext editContext = null!;

    protected override async Task OnInitializedAsync()
    {
        editContext = new(userDTO);
    }

    [EditorRequired, Parameter] public UserDTO userDTO { get; set; } = null!;
    [EditorRequired, Parameter] public EventCallback OnValidSubmit { get; set; }
    [EditorRequired, Parameter] public EventCallback ReturnAction { get; set; }
    [Inject] private SweetAlertService SweetAlertService { get; set; } = null!;
    public bool FormPostedSuccessfully { get; set; } = false;


    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited || FormPostedSuccessfully)
        {
            return;
        }

        var result = await SweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (!confirm)
        {
            context.PreventNavigation();
        }

        context.PreventNavigation();
    }
}
