@using CurrieTechnologies.Razor.SweetAlert2;
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@page "/cash-payments/create={orderId:int}"

<div class="pagos-contenedor">
    <!-- Sección Facturación -->
    <div class="pagos-seccion">
        <h2 class="pagos-titulo">
            Ingresa los datos de Facturación <span class="pagos-icono">💳</span>
        </h2>
        <div class="pagos-cuadro">
            <div class="pagos-fila">
                <div class="pagos-campo">
                    <label>Cedula</label>
                    <input type="text" placeholder="Cedula" @bind="userInfo.Cedula" />
                </div>
                <div class="pagos-campo">
                    <label>Correo</label>
                    <input type="text" placeholder="Email" @bind="userInfo.Email" />
                </div>
            </div>
            <div class="pagos-fila">
                <div class="pagos-campo">
                    <label>Telefono</label>
                    <input type="text" placeholder="Telefono" @bind="userInfo.PhoneNumber" />
                </div>
                <div class="pagos-campo">
                    <label>Direccion</label>
                    <input type="text" placeholder="Direccion" @bind="userInfo.Direccion" />
                </div>
            </div>
        </div>
    </div>
    <div class="pagos-boton-contenedor">
        <button class="pagos-boton pagar" @onclick="()=>CreateAsync(orderId)">Pagar</button>
    </div>
</div>


@code {

    [EditorRequired, Parameter] public PagoEfectivo pagoEfectivo { get; set; } = new PagoEfectivo();
    [EditorRequired, Parameter] public EventCallback OnValidSubmit { get; set; }
    [EditorRequired, Parameter] public EventCallback ReturnAction { get; set; }
    [Parameter] public int orderId { get; set; }
    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private SweetAlertService SweetAlertService { get; set; } = null!;
    public bool FormPostedSuccessfully { get; set; } = false;
    private EditContext editContext = null!;
    [EditorRequired] public UserDTO userInfo { get; set; } = new UserDTO();
    protected override async Task OnInitializedAsync()
    {
        editContext = new(pagoEfectivo);
        if (!await IsAuthenticatedAsync())
        {
            var toast = SweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "No se puede continuar con el pedido, no te encuentras registrado.");
            VolverLogin();
        }
    }
    private async Task<bool> IsAuthenticatedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        bool isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        userInfo.Cedula = user.Claims.FirstOrDefault(c => c.Type == "Cedula")?.Value ?? "0";
        userInfo.Email = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value ?? "0";
        userInfo.PhoneNumber = user.Claims.FirstOrDefault(c => c.Type == "Phone")?.Value ?? "0";
        userInfo.Direccion = user.Claims.FirstOrDefault(c => c.Type == "Address")?.Value ?? "0";

        return isAuthenticated;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited || FormPostedSuccessfully)
        {
            return;
        }

        var result = await SweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }

    private async Task CreateAsync(int orderId)
    {
        pagoEfectivo.IdPedido = orderId;
        pagoEfectivo.FechaPago = DateTime.Now;
        pagoEfectivo.Estado = false; //Se crea con estado pendiente
        var responseHttp = await Repository.PostAsync("/api/PagoEfectivo", pagoEfectivo);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message);
            return;
        }

        Return();
        await SweetAlertService.FireAsync("Pago ha sido creado con éxito.", icon: SweetAlertIcon.Success);
    }

    private void Return()
    {
        FormPostedSuccessfully = true;
        NavigationManager.NavigateTo("/");
    }
    private void VolverLogin()
    {
        NavigationManager.NavigateTo("/Login");
    }
}
