@page "/reviews/edit/{Id:int}"
@using CurrieTechnologies.Razor.SweetAlert2
@using Microsoft.AspNetCore.Components
@using Pizzeria.Shared.Entities
@inject IRepository Repository
@inject SweetAlertService SweetAlertService
@inject NavigationManager NavigationManager

<h3>Editar Reseña</h3>

@if (Reseña is null)
{
    <Loading />
}
else
{
    <ReseñaForm @ref="ReseñaForm" Reseña="Reseña" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private Reseña? Reseña;
    private ReseñaForm? ReseñaForm;
    [Parameter] public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await Repository.GetAsync<Reseña>($"api/Reseña/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                NavigationManager.NavigateTo("/reviews");
            }
            else
            {
                var messageError = await responseHttp.GetErrorMessageAsync();
                await SweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            Reseña = responseHttp.Response;
        }
    }

    private async Task EditAsync()
    {
        var responseHttp = await Repository.PutAsync("api/Reseña", Reseña);
        if (responseHttp.Error)
        {
            var mensajeError = await responseHttp.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        Return();
        await SweetAlertService.FireAsync("Cambios guardados con éxito.", "success");
    }

    private void Return()
    {
        NavigationManager.NavigateTo("/reviews");
    }
}
