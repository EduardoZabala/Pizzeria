@page "/Resena"
@using Pizzeria.Frontend.Services
@inject IOrderService OrderService
@inject SweetAlertService SweetAlertService
@inject IRepository Repository
@inject NavigationManager NavigationManager
@using Radzen
@using Radzen.Blazor

<div class="resena-form-container">
    <h2>Datos Reseña</h2>
    <EditForm Model="reseña" OnValidSubmit="EnviarReseña">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="numeroPedido">Número de Pedido</label>
            <InputNumber id="numeroPedido" class="form-control" @bind-Value="numeroPedido" placeholder="Ingrese el # de su pedido" />
        </div>

        <div class="form-group">
            <label for="comentario">Reseña</label>
            <InputTextArea id="comentario" class="form-control" @bind-Value="reseña.Comentario" maxlength="200" placeholder="... Ingrese su reseña (max 200 caracteres)"></InputTextArea>
        </div>

        <div class="rating-container">
            <label for="calificacion">Calificación</label>
            <!-- Componente RadzenRating para la calificación -->
            <RadzenRating @bind-Value="reseña.Calificacion" MaxRating="5"
                          Style="font-size: 2rem; outline: none;" />
        </div>

        <p>Calificación seleccionada: @reseña.Calificacion</p>

        <div class="button-group">
            <button type="submit" class="btn btn-primary">Publicar Reseña</button>
            <button @onclick="() => NavigationManager.NavigateTo(navigateUrl)">Regresar a reseñas</button>
        </div>
    </EditForm>
</div>

@code {
    private Reseña reseña = new()
        {
            FechaPublicacion = DateTime.Now // Fecha automática al crear la reseña
        };

    private int numeroPedido;
    private string navigateUrl = "/ResenasPage"; // Definir la URL aquí

    private async Task EnviarReseña()
    {
        var idCliente = await OrderService.ObtenerIdClientePorNumeroPedidoAsync(numeroPedido);

        if (idCliente == null)
        {
            await SweetAlertService.FireAsync("Error", "El número de pedido ingresado no existe. Para dejar una reseña, favor realizar un pedido.", "error");
            return;
        }

        reseña.CedulaUsuario = idCliente;

        var response = await Repository.PostAsync("/api/Reseña", reseña);
        if (!response.Error)
        {
            await SweetAlertService.FireAsync("¡Éxito!", "Reseña publicada con éxito.", "success");
            NavigationManager.NavigateTo("/ResenasPage");
        }
        else
        {
            var message = await response.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message, "error");
        }
    }
}
