@using CurrieTechnologies.Razor.SweetAlert2;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components;
@using Pizzeria.Shared.Entities;
@using Microsoft.AspNetCore.Components.Routing;

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Cedula:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@Usuario.Cedula" />
            <ValidationMessage For="@(() => Usuario.Cedula)" />
        </div>
        <label>Nombre:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Usuario.Nombre" />
            <ValidationMessage For="@(() => Usuario.Nombre)" />
        </div>
        <label>Telefono:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@Usuario.Telefono" />
            <ValidationMessage For="@(() => Usuario.Telefono)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {

        private EditContext editContext = null!;

        protected override void OnInitialized()
        {
            editContext = new(Usuario);
        }

        [EditorRequired, Parameter] public Usuario Usuario { get; set; } = null!;
        [EditorRequired, Parameter] public EventCallback OnValidSubmit { get; set; }
        [EditorRequired, Parameter] public EventCallback ReturnAction { get; set; }
        [Inject] private SweetAlertService SweetAlertService { get; set; } = null!;
        public bool FormPostedSuccessfully { get; set; } = false;

        private async Task OnBeforeInternalNavigation(LocationChangingContext context)
        {
            var formWasEdited = editContext.IsModified();

            if (!formWasEdited || FormPostedSuccessfully)
            {
                return;
            }

            var result = await SweetAlertService.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmación",
                    Text = "¿Deseas abandonar la página y perder los cambios?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true
                });

            var confirm = !string.IsNullOrEmpty(result.Value);
            if (confirm)
            {
                return;
            }

            context.PreventNavigation();
        }
    }