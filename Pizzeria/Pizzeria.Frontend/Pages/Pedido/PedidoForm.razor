@page "/orders/create"
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRepository Repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="pedidos-header">
        <h1> Pedidos</h1>
    </div>

    <div class="pedidos-container">
        <div class="content-wrapper">
            <!-- Formulario a la izquierda -->
            <div class="datos-form">
                <h3>Ingresa los datos para el domicilio</h3>
                <input type="text" class="form-input" placeholder="Direccion" @bind="Pedidos.Direccion" />
                <input type="number" class="form-input" placeholder="Promocion" @bind="Pedidos.IdPromocion" />
                <input type="number" class="form-input" placeholder="Cedula del Usuario" @bind="Pedidos.CedulaUsuario" readonly />
                <input type="double" class="form-input" placeholder="Promocion" @bind="Pedidos.CostoTotal" readonly />
                @* <input type="number" class="form-input" placeholder="Cedula del Trabajador" @bind="Pedidos.IdTrabajador" /> *@
            </div>
            <div class="productos-container">
                <div class="productos-grid">
                    <div class="producto-card">
                        <label>Producto:</label>
                        <InputSelect class="form-control" @bind-Value="@selectedProducto">
                            <option value="" disabled>Seleccione el producto</option>
                            @foreach (var pro in Productos)
                            {
                                <option value="@pro.Id">@pro.Nombre</option>
                            }
                        </InputSelect>
                        <button class="btn btn-primary" @onclick="() => AgregarProductoAsync(selectedProducto)">Agregar Producto</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="buttons-container">
            <button class="button" @onclick="VolverAlMenu">Volver al Menu</button>
            <button class="button" @onclick="CancelarPedido">Cancelar Pedido</button>
            <button class="button" @onclick="ConfirmarPedidoAsync">Confirmar pedido</button>
            @*TODO:Falta que confirma me redirija al de pagos*@
        </div>
    </div>
</EditForm>
@code {

    [Inject] private SweetAlertService SweetAlertService { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    public bool FormPostedSuccessfully { get; set; } = false;
    private List<int> ProductosSeleccionados = new List<int>();
    private int selectedProducto { get; set; }
    [EditorRequired] public Pedido Pedidos { get; set; } = new Pedido();

    private EditContext editContext = null!;
    private List<Producto> Productos = new List<Producto>();

    [EditorRequired, Parameter] public EventCallback OnValidSubmit { get; set; }
    [EditorRequired, Parameter] public EventCallback ReturnAction { get; set; }

    protected async override Task OnInitializedAsync()
    {
        editContext = new(Pedidos);
        if (await IsAuthenticatedAsync())
        {
            await charging();

        }
        else
        {
            var toast = SweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "No se puede continuar con el pedido, no te encuentras registrado.");
            VolverLogin();
        }
    }
    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited || FormPostedSuccessfully)
        {
            return;
        }

        var result = await SweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
    private async Task charging()
    {

        var responseHttp = await Repository.GetAsync<List<Producto>>("/api/Producto");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message);
            VolverLogin();
            return;
        }
        Productos = responseHttp.Response!;
    }
    private async Task<bool> IsAuthenticatedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        bool isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        string cedula = user.Claims.FirstOrDefault(c => c.Type == "Cedula")?.Value ?? "0";
        Pedidos.CedulaUsuario = cedula;
        
        return isAuthenticated;
    }
    private async Task CreateAsync()
    {

        var responseHttp = await Repository.PostAsync("/api/Pedido", Pedidos);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message);
            return;
        }

        Return();
        var toast = SweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.Center,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro creado con éxito.");

    }
    private async void AgregarProductoAsync(int productoId)
    {
        var toast = SweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.Center,
                ShowConfirmButton = true,
                Timer = 3000
            });
        if (!ProductosSeleccionados.Contains(productoId) && productoId != 0)
        {
            ProductosSeleccionados.Add(productoId);
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Producto registrado con éxito.");
            AddProductsAsync(productoId);
            return;
        }
        await toast.FireAsync(icon: SweetAlertIcon.Warning, message: "Producto ya esta registrado.");
    }
    private async void ConfirmarPedidoAsync()
    {
        await CreateAsync();
    }
    private async void AddProductsAsync(int producto)
    {
        Pedidos.Productos += producto.ToString() + ",";

        var responseHttp = await Repository.GetAsync<double>("/api/Producto/ConsultarPrecio?id=" + producto);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await SweetAlertService.FireAsync("Error", message);
            return;
        }
        Pedidos.CostoTotal += responseHttp.Response!;
    }

   
    private void Return()
    {
        NavigationManager.NavigateTo("/");
    }
    private void VolverLogin()
    {
        NavigationManager.NavigateTo("/Login");
    }
    private void VolverAlMenu()//TODO:Aqui va la referencia del menu
    {
        NavigationManager.NavigateTo("/");
    }
    private void CancelarPedido()
    {
        NavigationManager.NavigateTo("/orders/create");
    }

}